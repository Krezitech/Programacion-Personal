h1 {
    color: green;
    text-align: center;
}
 /* Estp va en orden, si pusiera otro "h1". usaría el úlitmo */

  /* También usa jerarquías, y, el de mayor jerarquía (más específico) siempre quedara opacado por uno más genérico, ejemplo "body" es más genérico que "h1" */

  /* Puede usarse el color hexadecimal o RGB */

body {
    color: black /* #0000FF, rgb(0,0,255)*/;
    background-color: darkgrey;
    font-family: Arial, Helvetica, sans-serif;
    font-size: medium;
    font-weight: bold;
    font-variant: normal;

    letter-spacing: 2px;
    word-spacing: 20px;
    text-align: justify;
    line-height: 2;

    /*text-decoration:line-through;
    text-transform: capitalize;

    text-indent: 50px;
    text-shadow: 3px 2px red;*/
}

.p1 {
    color: yellow;
    font-size: large;
    font-weight: lighter;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    word-spacing: 2px;
}

.p2 {
    color: black;
    font-size: small;
    font-weight: bolder;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    letter-spacing: 1px;
}


/*IMPORTANTE, SIEMPRE ESTE ORDEN: LINK, VISITED, HOVER, ACTIVE*/

a:link {
    color: green;
}

a:visited {
    color: blueviolet;
}

a:hover {
    color: yellow;
}

a:active {
    color: cyan;
}

/*  -con el "ul.a", afecta solamente a la clase "a" pero de solamente de listas desordenadas
    -y hay diferentes formas de poner las listas, como cuadros, circulos, num romanos, letras etc
    o nada.        */

ul.a {
    list-style: circle;
}
ul.b {
    list-style: square;
}
ol.c {
    list-style: upper-roman;
}
ol.d {
    list-style: lower-alpha;
}
ol.e {
    list-style: none;
}

/*  -o poner todo como una sola directriz como colores
    - o poner solo la parte de "li"    */
ul {
    background-color: cyan;
}
ol {
    background-color: orange;
    }

ol li {
    background-color: brown;
    padding: 5px;
    margin-left: 35px;
}

ul li {
    background-color: blueviolet;
    margin:5px;
}

/*  El elemento permanece el espacio pero no se muestra con "hidden"*/
ol.c {
    visibility: hidden   ;
}
/*  El elemento no se respeta el espacio con "none"*/
ol.g {
    display: none   ;
}

/*  Con "inline" el párrafo continua directamente como si solo tuviera un "espacio" */
p {
    display: inline;
}
/*  Con "block" el párrafo continua directamente como si  tuviera un "enter" */
p.pdos {
    display: block;
}

/*  Se pueden poner los responsive con "min-max"

    min-height-width - Nos daría que se muestra al menos ese pixelaje, y en caso de tener pantalla mas chica, haria un scroll para mostrar todo ese pixelaje

    max-height-width - Nos daría el máximo que desplegará la pantalla, y si es mas grande, no creceerá mas de lo estipulado.

*/
.container {
    background-color: gold;
    height: 200px;
    width: 100px;
    border: solid;
    border-color: red;
    border-width: 10px;

/*  Los borders se pueden poner cada uno por separado*/
    border-bottom-style: groove;
    border-top-style: solid;
    border-right-style: double;
    border-left-style: dotted;

/*  Igual los radius puedn ser independientes*/
    border-top-right-radius: 50%;
    border-top-left-radius: 30%;
    border-bottom-right-radius: 5%;
    border-bottom-left-radius: 70%;
}

.container2 {
    background-color: gold;
    height: 400px;
    width: 400px;
    border: solid;
    border-color: red;
    border-width: 10px;

    /* Margenes, la posición del contenedor respecto su propio contenedor */

    /*
    margin-top: 100px;
    margin-right: 30px;
    margin-bottom: 30px;
    margin-left: 50px;
    Son iguales las dos formas de poner el margen
    */
    margin: 100px 30px 30px 50px;

    /* En automático lo deja al centro
    margin: auto; */

    /* Padding  son los margenes pero del contenido en si*/

    /* Se usa igual que el margin
    padding-top: 50px;
    padding-right: 70px;
    padding-bottom: 105px;
    padding-left: 20px; */

    padding: 50px 70px 105px 20px;

}

.pos {
    border: 3px solid red;
    margin-bottom: 50px;
    position: static; /* Los elementos NO le afectan "left, right, bottom top" */
    left: 60px;
}

.pos2 {
    border: 3px solid red;
    margin-bottom: 50px;
    position: relative; /* Los elementos SI le afectan "left, right, bottom top" */
    left: 60px;
}

.pos3 {
    border: 3px solid red;
    margin-bottom: 50px;
    position: fixed; /* Los elementos Quedan fijos en la panalla a donde esta se mueva, es relativa a la pantalla*/
    left: 100px;
    bottom: 0;
}


div.relative {
    position: relative;
    width: 400px;
    height: 200px;
    left: 400px;
    border: 3px solid green;
}
/*  En este caso, la pos div abosulte esta dentro del contenedor div.relative, por lo cual será absoluto relativamente respecto al div.relative*/
div.absolute {
    position: absolute;
    top: 80px;
    right: 0;
    width: 200px;
    height: 100px;
    border: 3px solid green;
}

.pos4 {
    border: 3px solid red;
    position: sticky; /* Se basa o se pone relativo al scroll del usuario, y se hace fixed si cambia la pantalla */
    bottom: 0;
    width: 300px;
}

/* img {
    position: absolute;
    right: 0;
    top: 0;
    El z index hace que se pueda poner en capas y el orden de estas
    z-index: -1; 
} */

img {
    float: left; /* Puede decirdir donde esta el texto o la imagen, "none" dejaria todo como en el html original */
    width: 100px;
    height: 100px;
}

.overflowDiv {
    background-color: #fff;
    width: 200px;
    height: 150px;
    border: 1px dotted blue;
    overflow: auto; /* "visible" Enseña todo el texto aunq sobre, si se usa "hidden", el texto lo corta hasta donde cabe en el contenedor, y el "scroll" hara que siempre se ponga ventanitas, y en "auto" hara que se haga automatica con el scroll*/
    margin-top: 100px;
}